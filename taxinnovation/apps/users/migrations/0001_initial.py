# Generated by Django 3.0.8 on 2020-08-07 22:04

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


def create_anon_user(apps, schema_editor):
    User = apps.get_model('users', 'User')

    User.objects.create(
        username='anon',
        is_staff=False,
        is_active=False,
        email='anon@anon.com',
        is_verified=False,
        password='#'
    )


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
        ('catalogs', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 32 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=32, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('name', models.CharField(blank=True, max_length=120, verbose_name='Nombres')),
                ('last_name', models.CharField(blank=True, max_length=120, verbose_name='Apellido paterno')),
                ('second_last_name', models.CharField(blank=True, default='', max_length=120, verbose_name='Apellido materno')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Fecha en que el registro fue creado.', verbose_name='Fecha de creación')),
                ('modified_at', models.DateTimeField(auto_now=True, help_text='Última fecha en que el registro fue modificado', verbose_name='Ultima modificación')),
                ('is_active', models.BooleanField(default=False, help_text=('Indica si el registro debe ser tratado como activo.', 'Desmarque esta opción en lugar de borrar el registro'), verbose_name='active')),
                ('email', models.EmailField(error_messages={'unique': 'A user with that email already exists.'}, max_length=254, unique=True, verbose_name='email address')),
                ('phone_number', models.CharField(blank=True, max_length=10, validators=[django.core.validators.MinLengthValidator(10), django.core.validators.MaxLengthValidator(10)])),
                ('is_verified', models.BooleanField(default=False, help_text='Set to true when the user have verified its email address.', verbose_name='verified')),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='users_user_created', to=settings.AUTH_USER_MODEL, verbose_name='Usuario creador')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('modified_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='users_user_modified', to=settings.AUTH_USER_MODEL, verbose_name='Usuario editor')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Usuario',
                'verbose_name_plural': 'Usuarios',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True, help_text=('Indica si el registro debe ser tratado como activo.', 'Desmarque esta opción en lugar de borrar el registro'), verbose_name='active')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Fecha en que el registro fue creado.', verbose_name='Fecha de creación')),
                ('modified_at', models.DateTimeField(auto_now=True, help_text='Última fecha en que el registro fue modificado', verbose_name='Ultima modificación')),
                ('picture', models.ImageField(blank=True, null=True, upload_to='users/pictures/%Y/%m/%d/', verbose_name='Avatar')),
                ('kind_of_person', models.CharField(choices=[('PF', 'Persona Física'), ('PM', 'Persona Moral')], default='PF', max_length=2, verbose_name='Tipo de persona')),
                ('business_name', models.CharField(default='', max_length=256, verbose_name='Razón social')),
                ('rfc', models.CharField(default='XXXXXXXXXXXX', max_length=13, validators=[django.core.validators.MinLengthValidator(12), django.core.validators.MaxLengthValidator(13)], verbose_name='RFC')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Usuario')),
            ],
            options={
                'verbose_name': 'Perfil de usuario',
                'verbose_name_plural': 'Perfiles de usuarios',
            },
        ),
        migrations.CreateModel(
            name='UserAddress',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True, help_text=('Indica si el registro debe ser tratado como activo.', 'Desmarque esta opción en lugar de borrar el registro'), verbose_name='active')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Fecha en que el registro fue creado.', verbose_name='Fecha de creación')),
                ('modified_at', models.DateTimeField(auto_now=True, help_text='Última fecha en que el registro fue modificado', verbose_name='Ultima modificación')),
                ('street', models.CharField(default='', help_text='Nombre de la calle, Número Exterior, Número Interior, Manzana, etc', max_length=255, verbose_name='Calle y Número')),
                ('created_by', models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, related_name='users_useraddress_created', to=settings.AUTH_USER_MODEL, verbose_name='Usuario creador')),
                ('modified_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='users_useraddress_modified', to=settings.AUTH_USER_MODEL, verbose_name='Usuario editor')),
                ('postal_code', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='catalogs.PostalCodeCatalog', verbose_name='Código postal')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Usuario')),
            ],
            options={
                'verbose_name': 'Dirección del candidato',
                'verbose_name_plural': 'Direcciones de candidatos',
                'ordering': ('id',),
            },
        ),
        migrations.CreateModel(
            name='ContactUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True, help_text=('Indica si el registro debe ser tratado como activo.', 'Desmarque esta opción en lugar de borrar el registro'), verbose_name='active')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Fecha en que el registro fue creado.', verbose_name='Fecha de creación')),
                ('modified_at', models.DateTimeField(auto_now=True, help_text='Última fecha en que el registro fue modificado', verbose_name='Ultima modificación')),
                ('name', models.CharField(blank=True, max_length=120, verbose_name='Nombres')),
                ('last_name', models.CharField(blank=True, max_length=60, verbose_name='Apellido paterno')),
                ('second_last_name', models.CharField(blank=True, default='', max_length=60, verbose_name='Apellido materno')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('phone_number', models.CharField(blank=True, max_length=10, validators=[django.core.validators.MinLengthValidator(10), django.core.validators.MaxLengthValidator(10)])),
                ('created_by', models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, related_name='users_contactuser_created', to=settings.AUTH_USER_MODEL, verbose_name='Usuario creador')),
                ('modified_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='users_contactuser_modified', to=settings.AUTH_USER_MODEL, verbose_name='Usuario editor')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Usuario')),
            ],
            options={
                'verbose_name': 'Contacto de usuario',
                'verbose_name_plural': 'Contactos de usuarios',
            },
        ),
        migrations.RunPython(create_anon_user),
    ]
